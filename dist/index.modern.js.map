{"version":3,"file":"index.modern.js","sources":["../src/index.js"],"sourcesContent":["import fetchJsonp from 'fetch-jsonp';\n\nlet loadedOnce, file_append;\n\nconst fetchgist = async (url) => {\n    const response = await fetchJsonp(url);\n    const json = await response.json();\n    return json\n    \n}   \n\nconst stylesheet_manager = (css_url) => {\n    if (loadedOnce) return\n    const head = document.getElementsByTagName('head')[0]\n    const link = document.createElement('link')\n    link.rel = \"stylesheet\"\n    link.type = 'text/css';\n    link.href = css_url;\n    link.media = \"all\";\n    head.appendChild(link);\n    loadedOnce = true\n}\n\nasync function gistLoader() {\n\n    const gist_array = document.querySelectorAll('[data-gist]');\n\n    if (gist_array) {\n        for (const div of gist_array) {\n            if (div.dataset.file) {\n                file_append = `?file=${div.dataset.file}`\n            } else {file_append = '';}\n            const gist_url = div.dataset.gist + \".json\" + file_append;\n            const gist_obj = await fetchgist(gist_url);\n            const content = await gist_obj.div;\n            \n            div.innerHTML = content\n            div.classList = \"gist_embed\"\n            \n            const stylesheet_url = await gist_obj.stylesheet;\n\n            stylesheet_manager(stylesheet_url);\n\n            }\n    }\n\n};\n\n/**\n * gistLoader is a simple function which loads Github gists \n * in async manner after the document DOM was already rendered/changed\n * \n * To render the gist content, the script expects the folliwing\n * markup: `<div data-gist=\"https://gist.github.com/someuser/34261e6026oi4c303c40c6ece9961182\" data-file=\"part_one.sh\">`\n * Attr:\n * [data-gist] - the url of your Gist from the embed code *required\n * [data-file] - name of the file in a gist if you'd like to render only a part of it *optional\n * Id doesn't require any arguments, but expected to be run\n * on the client-side, when DOM API is available.\n */\nexport default gistLoader;"],"names":["loadedOnce","file_append","fetchgist","async","response","fetchJsonp","url","json","stylesheet_manager","css_url","head","document","getElementsByTagName","link","createElement","rel","type","href","media","appendChild","gistLoader","gist_array","querySelectorAll","div","dataset","file","gist_url","gist","gist_obj","content","innerHTML","classList","stylesheet_url","stylesheet"],"mappings":"2BAEA,IAAIA,EAAYC,EAEhB,MAAMC,EAAYC,MAAAA,IACd,MAAMC,QAAiBC,EAAWC,GAElC,aADmBF,EAASG,QAK1BC,EAAsBC,IACxB,GAAIT,EAAY,OAChB,MAAMU,EAAOC,SAASC,qBAAqB,QAAQ,GAC7CC,EAAOF,SAASG,cAAc,QACpCD,EAAKE,IAAM,aACXF,EAAKG,KAAO,WACZH,EAAKI,KAAOR,EACZI,EAAKK,MAAQ,MACbR,EAAKS,YAAYN,GACjBb,GAAa,GAGjBG,eAAeiB,IAEX,MAAMC,EAAaV,SAASW,iBAAiB,eAE7C,GAAID,EACA,IAAK,MAAME,KAAOF,EAAY,CAEtBpB,EADAsB,EAAIC,QAAQC,KACG,SAAQF,EAAIC,QAAQC,OACjB,GACtB,MAAMC,EAAWH,EAAIC,QAAQG,KAAO,QAAU1B,EACxC2B,QAAiB1B,EAAUwB,GAC3BG,QAAgBD,EAASL,IAE/BA,EAAIO,UAAYD,EAChBN,EAAIQ,UAAY,aAEhB,MAAMC,QAAuBJ,EAASK,WAEtCzB,EAAmBwB"}